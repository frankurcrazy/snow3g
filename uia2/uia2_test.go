package uia2

import (
	"encoding/binary"
	"encoding/hex"
	"github.com/pedroalbanese/snow3g"
	"github.com/stretchr/testify/assert"
	"strings"
	"testing"
)

func TestUIA2(t *testing.T) {
	type TestSet struct {
		CountI    string
		Fresh     string
		Direction snow3g.Direction
		IK        string
		BitLength uint64
		Message   string
		P         string
		Q         string
		MacI      string
	}

	testSets := map[string]TestSet{
		"5.3. Test Set 1": TestSet{
			CountI:    "38A6F056",
			Fresh:     "05D2EC49",
			Direction: snow3g.KEY_UPLINK,
			IK:        "2B D6 45 9F 82 C5 B3 00 95 2C 49 10 48 81 FF 48",
			BitLength: 189,
			Message:   "6B227737296F393C 8079353EDC87E2E8 05D2EC49A4F2D8E0",
			P:         "DC 0D 53 25 2A 5D 31 90",
			Q:         "7E 1B 8E 28 25 EC 4C AA",
			MacI:      "2BCE1820",
		},
		"5.4. Test Set 2": TestSet{
			CountI:    "3EDC87E2",
			Fresh:     "A4F2D8E2",
			Direction: snow3g.KEY_DOWNLINK,
			IK:        "D4 2F 68 24 28 20 1C AF CD 9F 97 94 5E 6D E7 B7",
			BitLength: 254,
			Message:   "B5924384328A4AE0 0B737109F8B6C8DD 2B4DB63DD533981C EB19AAD52A5B2BC0",
			P:         "67 0E 29 DE 2A D6 DE 7E",
			Q:         "A4 2A D0 48 40 7A 24 AC",
			MacI:      "FC7B18BD",
		},
		"5.5. Test Set 3": TestSet{
			CountI:    "36AF6144",
			Fresh:     "9838F03A",
			Direction: snow3g.KEY_DOWNLINK,
			IK:        "FD B9 CF DF 28 93 6C C4 83 A3 18 69 D8 1B 8F AB",
			BitLength: 319,
			Message: `5932BC0ACE2B0ABA 33D8AC188AC54F34 6FAD10BF9DEE2920 B43BD0C53A915CB7
                        DF6CAA72053ABFF2`,
			P:    "B3 9A FB 5D 53 AA 27 D4",
			Q:    "56 A1 C4 AE CB 68 F9 1A",
			MacI: "02F1FAAF",
		},
		"5.6. Test Set 4": TestSet{
			CountI:    "14793E41",
			Fresh:     "0397E8FD",
			Direction: snow3g.KEY_DOWNLINK,
			IK:        "C7 36 C6 AA B2 2B FF F9 1E 26 98 D2 E2 2A D5 7E",
			BitLength: 384,
			Message: `D0A7D463DF9FB2B2 78833FA02E235AA1 72BD970C1473E129 07FB648B6599AAA0
                        B24A038665422B20 A499276A50427009`,
			P:    "45 89 8E 82 8F 27 EB 98",
			Q:    "E3 23 07 09 A0 0C B7 0A",
			MacI: "38B554C0",
		},
		"5.7. Test Set 5": TestSet{
			CountI:    "296F393C",
			Fresh:     "6B227737",
			Direction: snow3g.KEY_DOWNLINK,
			IK:        "F4 EB EC 69 E7 3E AF 2E B2 CF 6A F4 B3 12 0F FD",
			BitLength: 1000,
			Message: `10BFFF839E0C7165 8DBB2D1707E14572 4F41C16F48BF403C 3B18E38FD5D1663B
                        6F6D900193E3CEA8 BB4F1B4F5BE82203 2232A78D7D75238D 5E6DAECD3B4322CF
                        59BC7EA84AB18811 B5BFB7BC553F4FE4 4478CE287A148799 90D18D12CA79D2C8
                        55149021CD5CE8CA 0371CA04FCCE143E 3D7CFEE94585B588 5CAC46068B`,
			P:    "99 14 88 47 1C 79 03 08",
			Q:    "66 2D 90 AA FA C5 92 D2",
			MacI: "061745AE",
		},
		"5.8. Test Set 6": TestSet{
			CountI:    "296F393C",
			Fresh:     "6B227737",
			Direction: snow3g.KEY_DOWNLINK,
			IK:        "B3 12 0F FD B2 CF 6A F4 E7 3E AF 2E F4 EB EC 69",
			BitLength: 16448,
			Message: `0000000000000000 0101010101010101 E0958045F3A0BBA4 E3968346F0A3B8A7
                        C02A018AE6407652 26B987C913E6CBF0 83570016CF83EFBC 61C082513E21561A
                        427C009D28C298EF ACE78ED6D56C2D45 05AD032E9C04DC60 E73A81696DA665C6
                        C48603A57B45AB33 221585E68EE31691 87FB0239528632DD 656C807EA3248B7B
                        46D002B2B5C7458E B85B9CE95879E034 0859055E3B0ABBC3 EACE8719CAA80265
                        C97205D5DC4BCC90 2FE1839629ED7132 8A0F0449F588557E 6898860E042AECD8
                        4B2404C212C9222D A5BF8A89EF679787 0CF50771A60F66A2 EE62853657ADDF04
                        CDDE07FA414E11F1 2B4D81B9B4E8AC53 8EA30666688D881F 6C348421992F31B9
                        4F8806ED8FCCFF4C 9123B89642527AD6 13B109BF75167485 F1268BF884B4CD23
                        D29A0934925703D6 34098F7767F1BE74 91E708A8BB949A38 73708AEF4A36239E
                        50CC08235CD5ED6B BE578668A17B58C1 171D0B90E813A9E4 F58A89D719B11042
                        D6360B1B0F52DEB7 30A58D58FAF46315 954B0A8726914759 77DC88C0D733FEFF
                        54600A0CC1D0300A AAEB94572C6E95B0 1AE90DE04F1DCE47 F87E8FA7BEBF77E1
                        DBC20D6BA85CB914 3D518B285DFA04B6 98BF0CF7819F20FA 7A288EB0703D995C
                        59940C7C66DE57A9 B70F82379B70E203 1E450FCFD2181326 FCD28D8823BAAA80
                        DF6E0F4435596475 39FD8907C0FFD9D7 9C130ED81C9AFD9B 7E848C9FED38443D
                        5D380E53FBDB8AC8 C3D3F06876054F12 2461107DE92FEA09 C6F6923A188D53AF
                        E54A10F60E6E9D5A 03D996B5FBC820F8 A637116A27AD04B4 44A0932DD60FBD12
                        671C11E1C0EC73E7 89879FAA3D42C64D 20CD1252742A3768 C25A901585888ECE
                        E1E612D9936B403B 0775949A66CDFD99 A29B1345BAA8D9D5 400C91024B0A6073
                        63B013CE5DE9AE86 9D3B8D95B0570B3C 2D391422D32450CB CFAE96652286E96D
                        EC1214A934652798 0A8192EAC1C39A3A AF6F15351DA6BE76 4DF89772EC0407D0
                        6E4415BEFAE7C925 80DF9BF507497C8F 2995160D4E218DAA CB02944ABF83340C
                        E8BE1686A960FAF9 0E2D90C55CC6475B ABC3171A80A36317 4954955D7101DAB1
                        6AE8179167E21444 B443A9EAAA7C91DE 36D118C39D389F8D D4469A846C9A262B
                        F7FA18487A79E8DE 11699E0B8FDF557C B48719D453BA7130 56109B93A218C896
                        75AC195FB4FB0663 9B3797144955B3C9 327D1AEC003D42EC D0EA98ABF19FFB4A
                        F3561A67E77C35BF 15C59C2412DA881D B02B1BFBCEBFAC51 52BC99BC3F1D15F7
                        71001B7029FEDB02 8F8B852BC4407EB8 3F891C9CA733254F DD1E9EDB56919CE9
                        FEA21C174072521C 18319A54B5D4EFBE BDDF1D8B69B1CBF2 5F489FCC98137254
                        7CF41D008EF0BCA1 926F934B735E090B 3B251EB33A36F82E D9B29CF4CB944188
                        FA0E1E38DD778F7D 1C9D987B28D132DF B9731FA4F4B41693 5BE49DE30516AF35
                        78581F2F13F561C0 663361941EAB249A 4BC123F8D15CD711 A956A1BF20FE6EB7
                        8AEA2373361DA042 6C79A530C3BB1DE0 C99722EF1FDE39AC 2B00A0A8EE7C800A
                        08BC2264F89F4EFF E627AC2F0531FB55 4F6D21D74C590A70 ADFAA390BDFBB3D6
                        8E46215CAB187D23 68D5A71F5EBEC081 CD3B20C082DBE4CD 2FACA28773795D6B
                        0C10204B659A939E F29BBE1088243624 429927A7EB576DD3 A00EA5E01AF5D475
                        83B2272C0C161A80 6521A16FF9B0A722 C0CF26B025D5836E 2258A4F7D4773AC8
                        01E4263BC294F43D EF7FA8703F3A4197 463525887652B0B2 A4A2A7CF87F00914
                        871E25039113C7E1 618DA34064B57A43 C463249FB8D05E0F 26F4A6D84972E7A9
                        054824145F91295C DBE39A6F920FACC6 59712B46A54BA295 BBE6A90154E91B33
                        985A2BCD420AD5C6 7EC9AD8EB7AC6864 DB272A516BC94C28 39B0A8169A6BF58E
                        1A0C2ADA8C883B7B F497A49171268ED1 5DDD2969384E7FF4 BF4AAB2EC9ECC652
                        9CF629E2DF0F08A7 7A65AFA12AA9B505 DF8B287EF6CC9149 3D1CAA39076E28EF
                        1EA028F5118DE61A E02BB6AEFC3343A0 50292F199F401857 B2BEAD5E6EE2A1F1
                        91022F9278016F04 7791A9D18DA7D2A6 D27F2E0E51C2F6EA 30E8AC49A0604F4C
                        13542E85B68381B9 FDCFA0CE4B2D3413 54852D360245C536 B612AF71F3E77C90
                        95AE2DBDE504B265 733DABFE10A20FC7 D6D32C21CCC72B8B 3444AE663D65922D
                        17F82CAA2B865CD8 8913D291A6589902 6EA1328439723C19 8C36B0C3C8D085BF
                        AF8A320FDE334B4A 4919B44C2B95F6E8 ECF73393F7F0D2A4 0E60B1D406526B02
                        2DDC331810B1A5F7 C347BD53ED1F105D 6A0D30ABA477E178 889AB2EC55D558DE
                        AB2630204336962B 4DB5B663B6902B89 E85B31BC6AF50FC5 0ACCB3FB9B57B663
                        297031378DB47896 D7FBAF6C600ADD2C 67F936DB037986DB 856EB49CF2DB3F7D
                        A6D23650E438F188 4041B013119E4C2A E5AF37CCCDFB6866 0738B58B3C59D1C0
                        248437472ABA1F35 CA1FB90CD714AA9F 635534F49E7C5BBA 81C2B6B36FDEE21C
                        A27E347F793D2CE9 44EDB23C8C9B914B E10335E350FEB507 0394B7A4A15C0CA1
                        20283568B7BFC254 FE838B137A2147CE 7C113A3A4D65499D 9E86B87DBCC7F03B
                        BD3A3AB1AA243ECE 5BA9BCF25F82836C FE473B2D83E7A720 1CD0B96A72451E86
                        3F6C3BA664A6D073 D1F7B5ED990865D9 78BD3815D06094FC 9A2ABA5221C22D5A
                        B996389E3721E3AF 5F05BEDDC2875E0D FAEB39021EE27A41 187CBB45EF40C3E7
                        3BC03989F9A30D12 C54BA7D2141DA8A8 75493E65776EF35F 97DEBC2286CC4AF9
                        B4623EEE902F840C 52F1B8AD658939AE F71F3F72B9EC1DE2 1588BD35484EA444
                        36343FF95EAD6AB1 D8AFB1B2A303DF1B 71E53C4AEA6B2E3E 9372BE0D1BC99798
                        B0CE3CC10D2A596D 565DBA82F88CE4CF F3B33D5D24E9C083 1124BF1AD54B7925
                        32983DD6C3A8B7D0`,
			P:    "EC 81 B3 C2 3C CF 81 87",
			Q:    "61 F7 63 FF 4B A3 D3 7A",
			MacI: "179F2FA6",
		},
	}

	for n, ts := range testSets {
		t.Run(n, func(t *testing.T) {
			countB, _ := hex.DecodeString(ts.CountI)
			count := binary.BigEndian.Uint32(countB)
			freshB, _ := hex.DecodeString(ts.Fresh)
			fresh := binary.BigEndian.Uint32(freshB)
			direction := ts.Direction
			ik, _ := hex.DecodeString(strings.Join(strings.Fields(ts.IK), ""))
			blength := ts.BitLength
			msg, _ := hex.DecodeString(strings.Join(strings.Fields(ts.Message), ""))

			u := NewUIA2(ik, count, fresh, direction)

			if len(ts.P) > 0 {
				pB, _ := hex.DecodeString(strings.Join(strings.Fields(ts.P), ""))
				p := binary.BigEndian.Uint64(pB)

				assert.Equal(t, p, u.p, "P should be equal.")
			}

			if len(ts.Q) > 0 {
				qB, _ := hex.DecodeString(strings.Join(strings.Fields(ts.Q), ""))
				q := binary.BigEndian.Uint64(qB)

				assert.Equal(t, q, u.q, "Q should be equal.")
			}

			expected, _ := hex.DecodeString(ts.MacI)
			assert.Equal(t, expected, u.Hash(msg, blength), "MAC-I should be equal.")
		})
	}
}
